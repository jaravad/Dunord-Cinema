/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cine;

import com.sun.awt.AWTUtilities;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Jesus David
 */
public class AddFunciones extends javax.swing.JFrame {

    /**
     * Creates new form AddHorarios
     */
    public AddFunciones() {
        initComponents();
        AWTUtilities.setWindowOpaque(this, false);
        setLocationRelativeTo(null);

        list.setModel(new DefaultListModel());
        ptr = null;

        File archivo = new File("mispeliculas.txt");
        Scanner s = null;
        try {
            s = new Scanner(archivo);
            while (s.hasNextLine()) {
                String linea = s.nextLine();
                String[] campos = linea.split(",");
                peliculacombo.addItem(campos[0]);
            }
        } catch (Exception ex) {
            System.out.println("Mensaje: " + ex.getMessage());
        } finally {
            try {
                if (s != null) {
                    s.close();
                }
            } catch (Exception ex2) {
                System.out.println("Mensaje 2: " + ex2.getMessage());
            }
        }
        ptr = agregarLista(ptr, "Sala1");
        ptr = agregarLista(ptr, "Sala2");
        writefromfiles(ptr);
        MostrarMultiLista(list, ptr);

    }

    void MostrarMultiLista(JList lista, Nodo ptr) {

        DefaultListModel model = (DefaultListModel) lista.getModel();

        model.clear();

        Nodo p = ptr;
        while (p != null) {
            model.addElement(p.nombre);
            SubNodo q = p.linksubNodo;

            while (q != null) {
                model.addElement("-> " + q.pelicula + ":   " + q.fechain + "  --  " + q.fechafin + "  |  " + q.formato + "  |  " + q.code);

                q = q.link2;

            }
            System.out.println("");
            p = p.link;
        }
    }

    class Nodo {

        String nombre;
        Nodo link;
        SubNodo linksubNodo;
    }

    class SubNodo {

        String pelicula;
        String fechain;
        String fechafin;
        String formato;
        int code;
        SubNodo link2;
    }
    Nodo ptr;

    Nodo agregarLista(Nodo ptr, String nombre) {
        Nodo p = new Nodo();
        p.nombre = nombre;
        if (ptr == null) {
            return p;
        }

        Nodo q = ptr;
        while (q.link != null) {
            q = q.link;
        }
        q.link = p;
        return ptr;
    }

    Nodo agregarSubLista(Nodo ptr, String name, String pelicula, String fechain, String fechafin, String formato, int code) {
        Nodo p = ptr;
        while (p != null && !p.nombre.equals(name)) {
            p = p.link;
        }
        SubNodo q = p.linksubNodo;
        SubNodo r = new SubNodo();
        r.pelicula = pelicula;
        r.fechain = fechain;
        r.fechafin = fechafin;
        r.formato = formato;
        r.code = code;
        if (q == null) {
            p.linksubNodo = r;
        } else {
            while (q.link2 != null) {
                q = q.link2;
            }
            q.link2 = r;
        }
        return ptr;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back = new javax.swing.JPanel();
        sala = new javax.swing.JLabel();
        peliculacombo = new javax.swing.JComboBox<>();
        title = new javax.swing.JLabel();
        salacombo = new javax.swing.JComboBox<>();
        pelicula = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        hin = new javax.swing.JLabel();
        horain = new javax.swing.JTextField();
        horarios = new javax.swing.JLabel();
        delete = new javax.swing.JLabel();
        add = new javax.swing.JLabel();
        close = new javax.swing.JLabel();
        volver = new javax.swing.JLabel();
        topbar = new javax.swing.JLabel();
        Dia = new javax.swing.JLabel();
        mes = new javax.swing.JLabel();
        mescomb = new javax.swing.JComboBox<>();
        dayspinner = new javax.swing.JSpinner();
        formatcmb = new javax.swing.JComboBox<>();
        formato = new javax.swing.JLabel();
        guardar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        back.setBackground(new java.awt.Color(255, 255, 255));
        back.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        back.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sala.setBackground(new java.awt.Color(255, 255, 255));
        sala.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        sala.setForeground(new java.awt.Color(153, 153, 153));
        sala.setText("Sala");
        back.add(sala, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 50, 20));

        peliculacombo.setFont(new java.awt.Font("Microsoft JhengHei Light", 0, 12)); // NOI18N
        back.add(peliculacombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 160, -1));

        title.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 18)); // NOI18N
        title.setForeground(new java.awt.Color(255, 153, 0));
        title.setText("Agregar Funciones");
        back.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 180, 26));

        salacombo.setFont(new java.awt.Font("Microsoft JhengHei Light", 0, 12)); // NOI18N
        salacombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        back.add(salacombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 50, -1));

        pelicula.setBackground(new java.awt.Color(255, 255, 255));
        pelicula.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        pelicula.setForeground(new java.awt.Color(153, 153, 153));
        pelicula.setText("Pel√≠cula");
        back.add(pelicula, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 50, 20));

        list.setFont(new java.awt.Font("Microsoft JhengHei Light", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(list);

        back.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 600, 200));

        hin.setBackground(new java.awt.Color(255, 255, 255));
        hin.setFont(new java.awt.Font("Microsoft YaHei", 0, 10)); // NOI18N
        hin.setForeground(new java.awt.Color(153, 153, 153));
        hin.setText("Hora de inicio");
        back.add(hin, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 80, 20));

        horain.setFont(new java.awt.Font("Microsoft JhengHei Light", 0, 12)); // NOI18N
        horain.setText("00:00");
        back.add(horain, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 210, 90, -1));

        horarios.setBackground(new java.awt.Color(255, 255, 255));
        horarios.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        horarios.setForeground(new java.awt.Color(153, 153, 153));
        horarios.setText("Horarios");
        back.add(horarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 60, 20));

        delete.setBackground(new java.awt.Color(255, 255, 255));
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Delete_20px.png"))); // NOI18N
        delete.setOpaque(true);
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteMouseExited(evt);
            }
        });
        back.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 330, 20, 20));

        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Add_20px.png"))); // NOI18N
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addMouseExited(evt);
            }
        });
        back.add(add, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 300, 20, 20));

        close.setBackground(new java.awt.Color(255, 255, 255));
        close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Delete_25px.png"))); // NOI18N
        close.setOpaque(true);
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeMouseExited(evt);
            }
        });
        back.add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 0, 40, 40));

        volver.setBackground(new java.awt.Color(255, 255, 255));
        volver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        volver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Back Arrow_28px.png"))); // NOI18N
        volver.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        volver.setOpaque(true);
        volver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volverMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                volverMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                volverMouseExited(evt);
            }
        });
        back.add(volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 40, 40));

        topbar.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        topbar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                topbarMouseDragged(evt);
            }
        });
        topbar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                topbarMousePressed(evt);
            }
        });
        back.add(topbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 40));

        Dia.setBackground(new java.awt.Color(255, 255, 255));
        Dia.setFont(new java.awt.Font("Microsoft YaHei", 0, 10)); // NOI18N
        Dia.setForeground(new java.awt.Color(153, 153, 153));
        Dia.setText("D√≠a");
        back.add(Dia, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 40, 20));

        mes.setBackground(new java.awt.Color(255, 255, 255));
        mes.setFont(new java.awt.Font("Microsoft YaHei", 0, 10)); // NOI18N
        mes.setForeground(new java.awt.Color(153, 153, 153));
        mes.setText("Mes");
        back.add(mes, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 80, 20));

        mescomb.setFont(new java.awt.Font("Microsoft JhengHei Light", 0, 12)); // NOI18N
        mescomb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione...", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        back.add(mescomb, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, 30));

        dayspinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));
        back.add(dayspinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 50, 30));

        formatcmb.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 12)); // NOI18N
        formatcmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2D", "3D", "4D" }));
        formatcmb.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formatcmbFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formatcmbFocusLost(evt);
            }
        });
        back.add(formatcmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 110, 70, -1));

        formato.setBackground(new java.awt.Color(255, 255, 255));
        formato.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        formato.setForeground(new java.awt.Color(153, 153, 153));
        formato.setText("Formato");
        back.add(formato, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 50, 20));

        guardar.setBackground(new java.awt.Color(255, 255, 255));
        guardar.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 13)); // NOI18N
        guardar.setForeground(new java.awt.Color(255, 153, 0));
        guardar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        guardar.setText("Guardar");
        guardar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        guardar.setOpaque(true);
        guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                guardarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                guardarMouseExited(evt);
            }
        });
        back.add(guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 510, 70, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseEntered
        delete.setIcon(new ImageIcon("src/imagenes/DeleteWhite_20px.png"));
        delete.setBackground(new Color(255, 51, 51));
    }//GEN-LAST:event_deleteMouseEntered

    private void deleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseExited
        delete.setIcon(new ImageIcon("src/imagenes/Delete_20px.png"));
        delete.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_deleteMouseExited

    private void addMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseEntered
        add.setIcon(new ImageIcon("src/imagenes/Add2_20px.png"));
    }//GEN-LAST:event_addMouseEntered

    private void addMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseExited
        add.setIcon(new ImageIcon("src/imagenes/Add_20px.png"));
    }//GEN-LAST:event_addMouseExited

    private void topbarMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topbarMouseDragged
        this.setLocation(this.getLocation().x + evt.getX() - x, this.getLocation().y + evt.getY() - y);
    }//GEN-LAST:event_topbarMouseDragged

    public static int x;
    public static int y;

    private void topbarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topbarMousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_topbarMousePressed

    private void volverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverMouseClicked
        Admin u = new Admin();
        this.setVisible(false);
        u.setVisible(true);
    }//GEN-LAST:event_volverMouseClicked

    private void volverMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverMouseEntered
        volver.setBackground(new Color(231, 231, 231));
    }//GEN-LAST:event_volverMouseEntered

    private void volverMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverMouseExited
        volver.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_volverMouseExited

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_closeMouseClicked

    private void closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseEntered
        close.setBackground(new Color(255, 51, 51));
        close.setIcon(new ImageIcon("src/imagenes/Deletewhite_25px.png"));
    }//GEN-LAST:event_closeMouseEntered

    private void closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseExited
        close.setBackground(new Color(255, 255, 255));
        close.setIcon(new ImageIcon("src/imagenes/Delete_25px.png"));
    }//GEN-LAST:event_closeMouseExited

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseClicked
        boolean sw12 = true;
        boolean dospuntos = horain.getText().contains(":");
        String[] hora = horain.getText().split(":");
        try {
            int hora1 = Integer.parseInt(hora[0]);
            int hora2 = Integer.parseInt(hora[1]);

        } catch (Exception e) {
            sw12 = false;
        }
        if (mescomb.getSelectedIndex() != 0 && sw12 == true && dospuntos == true) {

            Date date = new Date();
            String campos[] = horain.getText().split(":");
            date.setYear(2018 - 1900);
            date.setHours(Integer.parseInt(campos[0]));
            date.setMinutes(Integer.parseInt(campos[1]));
            date.setMonth(mescomb.getSelectedIndex() - 1);
            date.setSeconds(00);
            date.setDate(Integer.parseInt(String.valueOf(dayspinner.getValue())));
            SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE MMMM d HH:mm yyyy");
            Date datefin = new Date();
            datefin.setYear(2018 - 1900);
            String campos2[] = FileHandle.getField(String.valueOf(peliculacombo.getSelectedItem()), 1).split(":");
            datefin.setHours(date.getHours() + Integer.parseInt(campos2[0]));
            datefin.setMinutes(Integer.parseInt(campos[1]) + Integer.parseInt(campos2[1]));
            datefin.setMonth(mescomb.getSelectedIndex() - 1);
            datefin.setSeconds(00);
            datefin.setDate(date.getDate());
            DefaultListModel model = (DefaultListModel) list.getModel();
            if (model.isEmpty()) {
                Random rnd = new Random();
                int id = (int) (rnd.nextDouble() * 899999 + 100000);
                ptr = agregarSubLista(ptr, "Sala" + salacombo.getSelectedItem(), String.valueOf(peliculacombo.getSelectedItem()), String.valueOf(dateFormat.format(date)), String.valueOf(dateFormat.format(datefin)), String.valueOf(formatcmb.getSelectedItem()), id);
                MostrarMultiLista(list, ptr);
            } else {
                if (salacombo.getSelectedItem().equals("1")) {
                    Nodo p = ptr;

                    SubNodo q = p.linksubNodo;
                    boolean sw = false;
                    while (q != null && sw == false) {

                        String[] campos1 = q.fechain.split(" ");
                        String[] campos3 = q.fechafin.split(" ");
                        if (campos1[1].equalsIgnoreCase(String.valueOf(mescomb.getSelectedItem()))) {
                            if (campos1[2].equals(String.valueOf(dayspinner.getValue()))) {
                                String[] horaini = campos1[3].split(":");
                                String[] horafina = campos3[3].split(":");
                                int horain2 = Integer.parseInt(horaini[0]);
                                int minin = Integer.parseInt(horaini[1]);
                                int horafin = Integer.parseInt(horafina[0]);
                                int minfin = Integer.parseInt(horafina[1]);
                                String dura = FileHandle.getField(String.valueOf(peliculacombo.getSelectedItem()), 1);
                                String[] horaIngre = horain.getText().split(":");
                                String[] horadura = dura.split(":");
                                int horaIngresa = Integer.parseInt(horaIngre[0]);
                                int minIngresa = Integer.parseInt(horaIngre[1]);
                                int horaIngrefinal = horaIngresa + Integer.parseInt(horadura[0]);
                                int minIngrefinal = minIngresa + Integer.parseInt(horadura[1]);
                                if (horain2 == horaIngresa) {
                                    sw = true;
                                } else {
                                    if (horain2 < horaIngresa && horaIngresa < horafin) {
                                        sw = true;
                                    } else {
                                        if (horafin == horaIngresa) {
                                            if (minfin > minIngrefinal) {
                                                sw = true;
                                            }
                                        }
                                    }
                                }

                            }

                        }
                        q = q.link2;
                    }

                    if (sw == false) {
                        Random rnd = new Random();
                        int id = (int) (rnd.nextDouble() * 899999 + 100000);
                        ptr = agregarSubLista(ptr, "Sala" + salacombo.getSelectedItem(), String.valueOf(peliculacombo.getSelectedItem()), String.valueOf(dateFormat.format(date)), String.valueOf(dateFormat.format(datefin)), String.valueOf(formatcmb.getSelectedItem()), id);
                        MostrarMultiLista(list, ptr);
                    } else {
                        JOptionPane.showMessageDialog(null, "Fecha erronea", "Error", JOptionPane.QUESTION_MESSAGE);
                    }
                    System.out.println("");
                } else {
                    Nodo p;
                    p = ptr.link;

                    SubNodo q = p.linksubNodo;
                    boolean sw = false;
                    while (q != null && sw == false) {
                        String[] campos1 = q.fechain.split(" ");
                        String[] campos3 = q.fechafin.split(" ");
                        if (campos1[1].equalsIgnoreCase(String.valueOf(mescomb.getSelectedItem()))) {

                            if (campos1[2].equals(String.valueOf(dayspinner.getValue()))) {

                                String[] horaini = campos1[3].split(":");
                                String[] horafina = campos3[3].split(":");
                                int horain2 = Integer.parseInt(horaini[0]);
                                int minin = Integer.parseInt(horaini[1]);
                                int horafin = Integer.parseInt(horafina[0]);
                                int minfin = Integer.parseInt(horafina[1]);
                                String dura = FileHandle.getField(String.valueOf(peliculacombo.getSelectedItem()), 1);
                                String[] horaIngre = horain.getText().split(":");
                                String[] horadura = dura.split(":");
                                int horaIngresa = Integer.parseInt(horaIngre[0]);
                                int minIngresa = Integer.parseInt(horaIngre[1]);
                                int horaIngrefinal = horaIngresa + Integer.parseInt(horadura[0]);
                                int minIngrefinal = minIngresa + Integer.parseInt(horadura[1]);
                                if (horain2 == horaIngresa) {
                                    sw = true;
                                } else {
                                    if (horain2 < horaIngresa && horaIngresa < horafin) {
                                        sw = true;
                                    } else {
                                        if (horafin == horaIngresa) {
                                            if (minfin > minIngrefinal) {
                                                sw = true;
                                            }
                                        }
                                    }
                                }

                            }

                        }
                        q = q.link2;
                    }

                    if (sw == false) {
                        Random rnd = new Random();
                        int id = (int) (rnd.nextDouble() * 899999 + 100000);
                        ptr = agregarSubLista(ptr, "Sala" + salacombo.getSelectedItem(), String.valueOf(peliculacombo.getSelectedItem()), String.valueOf(dateFormat.format(date)), String.valueOf(dateFormat.format(datefin)), String.valueOf(formatcmb.getSelectedItem()), id);
                        MostrarMultiLista(list, ptr);
                    } else {
                        JOptionPane.showMessageDialog(null, "Fecha erronea", "Error", JOptionPane.QUESTION_MESSAGE);
                    }
                    System.out.println("");
                }
            }
        } else {
            if (mescomb.getSelectedIndex() == 0 ) {
                JOptionPane.showMessageDialog(null, "Seleccione un mes", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            if (sw12 == false && dospuntos == false) {
                JOptionPane.showMessageDialog(null, "Formato de hora invalido", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                if (sw12 == false) {
                    JOptionPane.showMessageDialog(null, "Ingrese solo numeros en el campo hora", "ERROR", JOptionPane.ERROR_MESSAGE);

                } else if (dospuntos == false) {
                    JOptionPane.showMessageDialog(null, "Formato de hora debe contener : entre hora y minutos", "ERROR", JOptionPane.ERROR_MESSAGE);

                }
            }

        }

    }//GEN-LAST:event_addMouseClicked

    private void formatcmbFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formatcmbFocusGained
        formato.setForeground(new Color(153, 0, 153));
    }//GEN-LAST:event_formatcmbFocusGained

    private void formatcmbFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formatcmbFocusLost
        formatcmb.setForeground(new Color(153, 153, 153));
    }//GEN-LAST:event_formatcmbFocusLost

    private void guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseClicked

        Nodo p = ptr;
        while (p != null) {
            File archivo = new File(p.nombre + ".txt");
            try {
                BufferedWriter bw2 = new BufferedWriter(new FileWriter(archivo));
                bw2.write("");
                bw2.close();
            } catch (Exception ex) {
                System.out.println(ex.toString());
            }
            SubNodo q = p.linksubNodo;

            while (q != null) {
                try (java.io.BufferedWriter bw = new java.io.BufferedWriter(new FileWriter(archivo, true));) {
                    bw.write(q.pelicula + "," + q.fechain + "," + q.fechafin + "," + q.formato + "," + String.valueOf(q.code));
                    bw.newLine();
                    File f = new File("Sillas/" + String.valueOf(q.code) + ".txt");
                    try {
                        BufferedWriter bw3 = new BufferedWriter(new FileWriter(f));
                        bw3.write("");
                        bw3.close();
                    } catch (Exception ex2) {
                        System.out.println(ex2.toString());
                    }

                } catch (Exception e) {
                    System.out.println(e.toString());
                }
                q = q.link2;

            }
            p = p.link;
        }


    }//GEN-LAST:event_guardarMouseClicked

    private void guardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseEntered
        guardar.setForeground(Color.WHITE);
        guardar.setBackground(new Color(255, 153, 0));
    }//GEN-LAST:event_guardarMouseEntered

    private void guardarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseExited
        guardar.setForeground(new Color(255, 153, 0));
        guardar.setBackground(Color.WHITE);
    }//GEN-LAST:event_guardarMouseExited

    void writefromfiles(Nodo ptr) {

        Nodo p = ptr;

        while (p != null) {
            File f = new File(p.nombre + ".txt");
            Scanner s = null;

            try {
                s = new Scanner(f);
                while (s.hasNextLine()) {
                    String linea = s.nextLine();
                    String[] campos = linea.split(",");
                    ptr = agregarSubLista(ptr, p.nombre, campos[0], campos[1], campos[2], campos[3], Integer.parseInt(campos[4]));
                }
            } catch (Exception ex) {
                System.out.println("Mensaje: " + ex.toString());
            } finally {
                try {
                    if (s != null) {
                        s.close();
                    }
                } catch (Exception ex2) {
                    System.out.println("Mensaje 2: " + ex2.toString());
                }
            }
            p = p.link;

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddFunciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddFunciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddFunciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddFunciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddFunciones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Dia;
    private javax.swing.JLabel add;
    private javax.swing.JPanel back;
    private javax.swing.JLabel close;
    private javax.swing.JSpinner dayspinner;
    private javax.swing.JLabel delete;
    private javax.swing.JComboBox<String> formatcmb;
    private javax.swing.JLabel formato;
    private javax.swing.JLabel guardar;
    private javax.swing.JLabel hin;
    private javax.swing.JTextField horain;
    private javax.swing.JLabel horarios;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> list;
    private javax.swing.JLabel mes;
    private javax.swing.JComboBox<String> mescomb;
    private javax.swing.JLabel pelicula;
    private javax.swing.JComboBox<String> peliculacombo;
    private javax.swing.JLabel sala;
    private javax.swing.JComboBox<String> salacombo;
    private javax.swing.JLabel title;
    private javax.swing.JLabel topbar;
    private javax.swing.JLabel volver;
    // End of variables declaration//GEN-END:variables
}
